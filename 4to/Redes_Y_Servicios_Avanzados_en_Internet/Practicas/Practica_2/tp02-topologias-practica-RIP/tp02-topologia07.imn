node n1 {
    type router
    model router
    network-config {
	hostname n1
	!
	interface eth0
	 ip address 172.16.0.100/24
	!
	interface eth1
	 ip address 172.16.1.1/24
	!
    }
    canvas c1
    iconcoords {254.0 204.0}
    labelcoords {254.0 236.0}
    interface-peer {eth0 n2}
    interface-peer {eth1 n3}
    services {zebra RIP vtysh IPForward}
}

node n2 {
    type rj45
    network-config {
	hostname dummy0
	!
    }
    canvas c1
    iconcoords {429.0 496.0}
    labelcoords {429.0 528.0}
    interface-peer {0 n1}
}

node n3 {
    type router
    model router
    network-config {
	hostname n3
	!
	interface eth1
	 ip address 172.16.2.1/24
	!
	interface eth0
	 ip address 172.16.1.2/24
	!
    }
    canvas c1
    iconcoords {457.0 134.0}
    labelcoords {457.0 166.0}
    interface-peer {eth0 n1}
    interface-peer {eth1 n4}
    services {zebra RIP vtysh IPForward}
}

node n4 {
    type lanswitch
    network-config {
	hostname n4
	!
    }
    canvas c1
    iconcoords {634.0 215.0}
    labelcoords {634.0 239.0}
    interface-peer {e0 n3}
    interface-peer {e1 n5}
}

node n5 {
    type router
    model host
    network-config {
	hostname SERVIDOR
	!
	interface eth0
	 ip address 172.16.2.10/24
	!
    }
    canvas c1
    iconcoords {790.0 139.0}
    labelcoords {792.0 170.0}
    interface-peer {eth0 n4}
    services {MGEN_Sink DefaultRoute SSH UserDefined}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('server.py', )
	cmdup=('python server.py', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:server.py
	custom-command server.py
	config {
	#!/usr/bin/python
	'''
	    Simple socket server using threads
	'''
	 
	import socket
	import sys
	import hashlib 
	HOST = ''   
	PORT = 8000
	 
	s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	print 'Socket created'
	 
	try:
	    s.bind((HOST, PORT))
	    s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
	except socket.error as msg:
	    print 'Bind failed. Error Code : ' + str(msg[0]) + ' Message ' + msg[1]
	    sys.exit()
	     
	print 'Socket bind complete'
	 
	s.listen(10)
	print 'Socket now listening'+str(PORT)
	 
	while 1:
	    conn, addr = s.accept()
	    print 'Connected with ' + addr[0] + ':' + str(addr[1])
	    message=hashlib.sha1()
	    conn.send("Bienvenido a redes y servicios avanzados en Internet\n")
	    while True:
	      conn.send("Ingrese su numero de legajo\n")
	      legajo = conn.recv(1024)
	      if  legajo:
	        break
	    message.update(addr[0]+legajo.replace("\n", ""))
	    conn.send("El hash es:" + message.hexdigest()+"\n")
	    print conn.recv(1024)
	    conn.close()
	     
	s.close()
	
	}
    }
    custom-config {
	custom-config-id service:servicios
	custom-command servicios
	config {
	files=('startServices.sh', )
	}
    }
    custom-config {
	custom-config-id service:servicios:startServices.sh
	custom-command startServices.sh
	config {
	while true; do ncat -l -v -p 1337 -c "echo -n 'El hash es: '; grep Connection my.ip|  head -n1 | cut -d' ' -f 4 | rev | cut -c 2- | rev|tr -d '\n' | sha1sum" 2> my.ip; done
	
	}
    }
}

link l1 {
    nodes {n1 n2}
}

link l2 {
    nodes {n1 n3}
    bandwidth 0
}

link l3 {
    nodes {n3 n4}
    bandwidth 0
}

link l4 {
    nodes {n4 n5}
    bandwidth 0
}

annotation a1 {
    iconcoords {126.0 379.0 862.0 553.0}
    type rectangle
    label {Máquina virtual}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #C0C0FF
    width 0
    border black
    rad 25
    effects {bold}
    canvas c1
}

annotation a2 {
    iconcoords {119 63 848 316}
    type rectangle
    label {Emulación CORE}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #c0c079
    width 0
    border black
    rad 25
    effects {bold}
    canvas c1
}

canvas c1 {
    name {Canvas1}
}

option global {
    interface_names yes
    ip_addresses yes
    ipv6_addresses no
    node_labels yes
    link_labels yes
    show_api no
    background_images no
    annotations yes
    grid no
    traffic_start 0
}

option session {
    enablerj45=0
}

